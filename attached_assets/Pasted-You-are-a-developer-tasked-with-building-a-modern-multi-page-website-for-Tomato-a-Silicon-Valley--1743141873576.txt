You are a developer tasked with building a modern, multi-page website for Tomato , a Silicon Valley-style food chain company. Use Next.js for server-side rendering to ensure fast load times and excellent SEO. The website should include a landing page, blog section, about page, menu page, and contact page. All content will be hardcoded into the application without relying on a CMS.

Task:
Build a multi-page website for Tomato using Next.js. Each page should be designed to reflect the company’s brand identity and provide a seamless user experience. Below are the details for each page:

1. Landing Page
Purpose: Introduce Tomato’s mission, values, and offerings.
Sections:
Hero Section: Highlight Tomato’s mission (e.g., fresh ingredients, sustainability). Include a CTA button like "Explore Our Menu."
About Us: Briefly describe the company.
Menu Preview: Showcase popular dishes or categories with images and brief descriptions.
Testimonials: Display quotes from satisfied customers or partners.
Call-to-Action (CTA): Encourage users to sign up for newsletters, visit locations, or explore more.
2. Blog Section
Purpose: Provide engaging content about food trends, recipes, and company updates.
Features:
Hardcoded blog posts categorized by topics (e.g., Recipes, Food Trends, Company News).
Each blog post should include:
Title, author, publication date, and featured image.
Content written in markdown or HTML format.
Pagination for browsing through multiple posts.
Search functionality to find specific articles.
Blog data will be stored in JSON files within the project directory.
3. About Page
Purpose: Share Tomato’s story, mission, and team.
Sections:
Our Story: Describe the company’s journey, highlighting milestones and achievements.
Mission & Values: Explain Tomato’s commitment to quality, sustainability, and customer satisfaction.
Meet the Team: Showcase key team members with photos and short bios.
Partnerships: Highlight any notable partnerships or collaborations.
4. Menu Page
Purpose: Display Tomato’s food offerings in an organized and visually appealing way.
Features:
Categorized menu items (e.g., Starters, Main Course, Desserts).
Each item should include:
Name, description, price, and image.
Option to filter by dietary preferences (e.g., Vegan, Gluten-Free).
Responsive design for easy navigation on all devices.
5. Contact Page
Purpose: Allow users to get in touch with Tomato.
Features:
Contact form with fields for name, email, subject, and message.
Embedded Google Maps showing Tomato’s locations.
Links to social media profiles and customer support email/phone.
FAQ section addressing common queries.
Technical Requirements
Framework: Use Next.js for server-side rendering to ensure fast load times and excellent SEO.
Styling: Use Tailwind CSS or similar frameworks for consistent and responsive design.
Data Storage: Store blog posts and menu items in JSON files within the project directory for easy updates.
Performance Optimization:
Implement lazy loading for images.
Optimize assets for faster loading.
Ensure the site is secure and follows best practices for performance.
Accessibility: Follow WCAG 2.1 guidelines to make the site accessible to all users.
Responsive Design: Ensure the site works seamlessly on desktop, tablet, and mobile devices.
Output Format
Provide the following deliverables:

Codebase:
Complete source code for the multi-page website built with Next.js.
JSON files for storing blog posts and menu items.
Integration files for connecting to third-party services (e.g., Google Maps).
Documentation:
Detailed README file explaining how to set up, run, and deploy the application.
Instructions for updating blog posts and menu items via JSON files.
Notes on integrating with the existing architecture (e.g., DNS routing, CDN layer).
Visual Aids:
Wireframes or mockups for each page to visualize the design.
Screenshots of the deployed application showcasing key features.
Deployment Instructions:
Step-by-step guide for deploying the application to a production environment (e.g., Vercel, Netlify).
Examples
Hero Section Example:
html
Copy
1
2
3
4
5
⌄
<section className="hero-section">
  <h1>Welcome to Tomato</h1>
  <p>Where Fresh Meets Flavorful</p>
  <button>Explore Our Menu</button>
</section>
Blog Post Component Example:
jsx
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
⌄
const BlogPost = ({ title, author, date, content }) => {
  return (
    <article className="blog-post">
      <h2>{title}</h2>
      <div className="meta">
        <span>{author}</span>
        <span>{date}</span>
      </div>
      <img src={featuredImage} alt={title} />
      <div dangerouslySetInnerHTML={{ __html: content }} />
    </article>
  );
};
export default BlogPost;
Menu Item Component Example:
jsx
Copy
1
2
3
4
5
6
7
8
9
10
11
⌄
const MenuItem = ({ name, description, price, image }) => {
  return (
    <div className="menu-item">
      <img src={image} alt={name} />
      <h3>{name}</h3>
      <p>{description}</p>
      <span>${price}</span>
    </div>
  );
};
export default MenuItem;
JSON File Example for Blog Posts:
json
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
⌄
⌄
⌄
[
  {
    "id": 1,
    "title": "Top 5 Food Trends in 2023",
    "author": "Jane Doe",
    "date": "2023-10-01",
    "content": "<p>Here are the top food trends shaping the industry...</p>",
    "featuredImage": "/images/blog/trends.jpg"
  },
  {
    "id": 2,
    "title": "How to Make the Perfect Salad",
    "author": "John Smith",
    "date": "2023-10-05",
    "content": "<p>Follow these steps to create a delicious salad...</p>",
    "featuredImage": "/images/blog/salad.jpg"
  }
]
Constraints
Keep the design clean, modern, and intuitive.
Ensure accessibility and adhere to WCAG 2.1 guidelines.
Use industry-standard tools and libraries to maintain scalability and maintainability.
Avoid unnecessary complexity while ensuring a professional and engaging user experience.